
list(range(17))# - она покажет с 0 до 16 (17 чисел как раз!)
list(range(1, 100,3)) # это показывает с какого числа (с 1) до какго чисмла
# (до 100) и с каким шагом (3).
list(range(10,0,-3))# - а это обратная последовательность от 10 до 0 через 3 цифры
sum(range(10,100)) # - а это нахождение арифметической прогрессии (суммы чисел)
# в данном случае от 10 до ста (4905)
len(range(10,100,7))# - таким образом мы выяснили сколько (!) цифр в данной по-
#следовательности с шагом (7) = 13
# усли взять 3 переменых:
a,.b,c = range(5,8) # - мы взяли 3 переменных от 5 до 8 (не включительно).И если вызовем переменную а , то вызовется
# 5, в переменной b - 6, а в переменной с -7.
следи за последовательностью!!!
r = range(1,7)
len(r) # -  и он выдаст результат = 6!!!
r [1] # - он вызовет 2 !!! range - это итерируемый объект , т.е. такой , который предоставляет
# прохождение последовательно, поочерёдно по всем элементам в переменной
v = iter(range(5))
>>> v
<range_iterator object at 0x000002977635E850>
>>> next (v)
0
>>> v = iter(range(5))
>>> v
<range_iterator object at 0x000002977635E730>
>>> next (v)
0
>>> next(v)
1
можем записывать функцию next следующим образом:
v._next_() # -только почему-то она не работает...
ну ничего зато работает просто:
next(v)
# так же есть возможность проходить поочерёдно по объектам в спмках:
n = iter([44,idiot,pridurok])
>>> n = iter([44,"idiot","pridurok"])
>>> next(n)
44
>>> next(n)
'idiot'
>>> next(n)
'pridurok'
>>> # таким образом мы почерёдно вызвали каждый из объектов в списке
цифры как то (567) - не будут поочерёдно показываться , хоть лбом расшибись!!
но строка - БУДЕТ, потому что она состоит из букв -отдельных элементов,
ПОДРОБНЕЕ: https://www.youtube.com/watch?v=9J0fvF4k4F4
